---
import "../../styles/list-page.css";
import Layout from "../../layouts/Layout.astro";
import Footer from "../../components/Footer.astro";
import SearchBar from "../../components/SearchBar.astro";
---

<Layout title="Blog Posts">
  <div class="fixed inset-0 bg-white dark:bg-gray-900 z-50 flex items-center justify-center page-loader">
    <div class="text-2xl font-bold text-gray-800 dark:text-white loader-text">Loading...</div>
  </div>

  <div class="min-h-screen max-w-4xl mx-auto px-4 py-8 relative z-10 page-content">
    <div class="flex items-center justify-between mb-10">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Blog Posts</h1>
      <a href="/" class="text-sm font-medium text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
        </svg>
        Back to Home
      </a>
    </div>
    
    <SearchBar placeholder="Search posts..." />
    
    <div id="blog-posts-container"></div>
    
    <div id="pagination-container" class="mt-12 flex justify-center"></div>
  </div>
  
  <Footer />
</Layout>

<script src="../../scripts/shared-layout"></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const blogPostsContainer = document.getElementById('blog-posts-container');
    const paginationContainer = document.getElementById('pagination-container');
    const POSTS_PER_PAGE = 5;
    
    let sortedPosts: any[] = [];
    let filteredPosts: any[] = [];
    let searchQuery = '';
    let currentPage = 1;
    
    fetch('/api/posts')
      .then(response => response.json())
      .then((data: any[]) => {
        sortedPosts = data;
        filteredPosts = [...sortedPosts];
        loadPage(currentPage);
      })
      .catch(error => {
        console.error('Error fetching posts:', error);
      });
    
    document.addEventListener('search-input', (e) => {
      const event = e as CustomEvent;
      searchQuery = event.detail.value.toLowerCase();
      filterPosts();
      loadPage(1);

      const cards = document.querySelectorAll('.staggered-card:not(.card-ready)');
      cards.forEach(card => {
        card.classList.add('card-ready');
      });
    });
    
    function filterPosts() {
      if (!searchQuery) {
        filteredPosts = [...sortedPosts];
        return;
      }
      
      filteredPosts = sortedPosts.filter(post => {
        const title = post.title?.toLowerCase() || '';
        const description = post.description?.toLowerCase() || '';
        const tags = post.tags?.join(' ').toLowerCase() || '';
        
        return title.includes(searchQuery) || 
        description.includes(searchQuery) || 
        tags.includes(searchQuery);
      });
    }
    
    function highlightText(text: string, query: string) {
      if (!query) return text;
      
      const regex = new RegExp(`(${query})`, 'gi');
      return text.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-800 text-gray-900 dark:text-white">$1</mark>');
    }
    
    function loadPage(page: number) {
      currentPage = page;
      const startIndex = (page - 1) * POSTS_PER_PAGE;
      const endIndex = startIndex + POSTS_PER_PAGE;
      const paginatedPosts = (filteredPosts.slice(startIndex, endIndex));
      
      renderPosts(paginatedPosts);
      renderPagination(page, Math.ceil(filteredPosts.length / POSTS_PER_PAGE) || 1);
      
      setTimeout(() => {
        applyCardAnimations();
      }, 200);
    }
    
    function applyCardAnimations() {
      const cards = document.querySelectorAll('.staggered-card');
      cards.forEach((card: Element, index: number) => {
        setTimeout(() => {
          card.classList.add('card-ready');
        }, index * 150);
      });
    }
    
    function renderPosts(posts: any[]) {
      if (!blogPostsContainer) return;
      
      if (posts.length === 0) {
        blogPostsContainer.innerHTML = `
          <div class="text-center py-12">
            <h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-4">No posts found</h2>
            <p class="text-gray-600 dark:text-gray-400">Try different search terms.</p>
          </div>
        `;
        return;
      }
      
      blogPostsContainer.innerHTML = `
        <div class="grid grid-cols-1 gap-6 cards-container">
          ${posts.map((post: any, index: number) => {
            const highlightedTitle = highlightText(post.title, searchQuery);
            const highlightedDescription = highlightText(post.description, searchQuery);
            
            return `
              <article class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 staggered-card transform hover:-translate-y-1" data-index="${index}">
                <div class="p-6">
                  <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-3">
                    <time datetime="${post.pubDate}">
                      ${new Date(post.pubDate).toLocaleDateString('en-US', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                      })}
                    </time>
                  </div>
                  <h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-3">
                    <a href="/posts/${post.slug}" class="hover:underline">${highlightedTitle}</a>
                  </h2>
                  <p class="text-gray-600 dark:text-gray-400 mb-4">
                    ${highlightedDescription}
                  </p>
                  <div class="flex flex-wrap gap-2">
                    ${post.tags?.map((tag: string) => {
                      const highlightedTag = highlightText(tag, searchQuery);
                      return `
                        <span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded dark:bg-blue-900 dark:text-blue-300">${highlightedTag}</span>
                      `;
                    }).join('') || ''}
                  </div>
                </div>
              </article>
            `;
          }).join('')}
        </div>
      `;
    }
    
    function renderPagination(currentPage: number, totalPages: number) {
      if (!paginationContainer) return;
      
      let paginationHTML = `
        <nav class="flex items-center space-x-2">
      `;
      
      if (currentPage > 1) {
        paginationHTML += `
          <button data-page="${currentPage - 1}" class="px-3 py-1 text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700 rounded">Previous</button>
        `;
      } else {
        paginationHTML += `
          <span class="px-3 py-1 text-gray-500 dark:text-gray-400">Previous</span>
        `;
      }
      
      for (let page = 1; page <= totalPages; page++) {
        paginationHTML += `
          <button 
            data-page="${page}"
            class="px-3 py-1 rounded ${page === currentPage ? 'bg-blue-600 text-white' : 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700'}"
          >
            ${page}
          </button>
        `;
      }
      
      if (currentPage < totalPages) {
        paginationHTML += `
          <button data-page="${currentPage + 1}" class="px-3 py-1 text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700 rounded">Next</button>
        `;
      } else {
        paginationHTML += `
          <span class="px-3 py-1 text-gray-500 dark:text-gray-400">Next</span>
        `;
      }
      
      paginationHTML += `
        </nav>
      `;
      
      paginationContainer.innerHTML = paginationHTML;
      
      document.querySelectorAll('#pagination-container button').forEach(button => {
        button.addEventListener('click', (e) => {
          const target = e.target as HTMLButtonElement;
          if (target) {
            const page = parseInt(target.dataset.page || '1');
            if (page) {
              loadPage(page);
              const container = document.querySelector('#blog-posts-container');
              if (container) {
                container.scrollIntoView({ behavior: 'smooth' });
              }
            }
          }
        });
      });
    }
  });
</script>