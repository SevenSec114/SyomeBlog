---
import "../../styles/list-page.css";
import Layout from "../../layouts/Layout.astro";
import Footer from "../../components/Footer.astro";
import SearchBar from "../../components/SearchBar.astro";
import { getCollection } from 'astro:content';

const repos = await getCollection('repos');
const sortedRepos = repos.sort((a, b) => b.slug.localeCompare(a.slug));

const serializedRepos = sortedRepos.map(repo => ({
  slug: repo.slug,
  title: repo.data.title,
  description: repo.data.description,
  tags: repo.data.tags || [],
  category: repo.data.category || 'Default',
}));
---

<Layout title="Public Repos">
  <div class="fixed inset-0 bg-white dark:bg-gray-900 z-50 flex items-center justify-center page-loader">
    <div class="text-2xl font-bold text-gray-800 dark:text-white loader-text">Loading...</div>
  </div>

  <div class="min-h-screen max-w-4xl mx-auto px-4 py-8 relative z-10 page-content">
    <div class="flex items-center justify-between mb-10">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Public Repos</h1>
      <a href="/" class="text-sm font-medium text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
        </svg>
        Back to Home
      </a>
    </div>
    
    <div class="flex flex-col md:flex-row gap-8">
      <div class="md:w-1/4">
        <div id="category-filter-container"></div>
      </div>
      
      <div class="md:w-3/4">
        <SearchBar placeholder="Search repos..." />
        
        <div id="repos-container"></div>
        
        <div id="pagination-container" class="mt-12 flex justify-center"></div>
      </div>
    </div>
  </div>
  
  <Footer />
</Layout>

<script src="../../scripts/shared-layout"></script>

<script is:inline define:vars={{ serializedRepos }}>
  document.addEventListener('DOMContentLoaded', () => {
    const reposContainer = document.getElementById('repos-container');
    const paginationContainer = document.getElementById('pagination-container');
    const categoryFilterContainer = document.getElementById('category-filter-container');
    const REPOS_PER_PAGE = 5;
    
    let sortedRepos = serializedRepos;
    let filteredRepos = [...sortedRepos];
    let searchQuery = '';
    let currentCategory = '';
    let currentPage = 1;
    
    loadPage(currentPage);
    renderCategoryFilter();
    
    document.addEventListener('search-input', (e) => {
      const event = e;
      searchQuery = event.detail.value.toLowerCase();
      filterRepos();
      loadPage(1);

      const cards = document.querySelectorAll('.staggered-card:not(.card-ready)');
      cards.forEach(card => {
        card.classList.add('card-ready');
      });
    });

    function filterRepos() {
      let result = [...sortedRepos];
      
      if (currentCategory) {
        result = result.filter(repo => repo.category === currentCategory);
      }
      
      if (searchQuery) {
        result = result.filter(repo => {
          const title = repo.title?.toLowerCase() || '';
          const description = repo.description?.toLowerCase() || '';
          const tags = repo.tags?.join(' ').toLowerCase() || '';
          const category = repo.category?.toLowerCase() || '';
          
          return title.includes(searchQuery) || 
                 description.includes(searchQuery) || 
                 tags.includes(searchQuery) ||
                 category.includes(searchQuery);
        });
      }
      
      filteredRepos = result;
    }
    
    function highlightText(text, query) {
      if (!query) return text;
      
      const regex = new RegExp(`(${query})`, 'gi');
      return text.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-800 text-gray-900 dark:text-white">$1</mark>');
    }
    
    function loadPage(page) {
      currentPage = page;
      const startIndex = (page - 1) * REPOS_PER_PAGE;
      const endIndex = startIndex + REPOS_PER_PAGE;
      const paginatedRepos = filteredRepos.slice(startIndex, endIndex);
      
      renderRepos(paginatedRepos);
      renderPagination(page, Math.ceil(filteredRepos.length / REPOS_PER_PAGE) || 1);
      
      setTimeout(() => {
        applyCardAnimations();
      }, 200);
    }
    
    function applyCardAnimations() {
      const cards = document.querySelectorAll('.staggered-card');
      cards.forEach((card, index) => {
        setTimeout(() => {
          card.classList.add('card-ready');
        }, index * 150);
      });
    }
    
    function renderRepos(repos) {
      if (!reposContainer) return;
      
      if (repos.length === 0) {
        reposContainer.innerHTML = `
          <div class="text-center py-12">
            <h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-4">No repos found</h2>
            <p class="text-gray-600 dark:text-gray-400">Try different search terms or select a different category.</p>
          </div>
        `;
        return;
      }
      
      reposContainer.innerHTML = `
        <div class="grid grid-cols-1 gap-6 cards-container">
          ${repos.map((repo, index) => {
            const highlightedTitle = highlightText(repo.title, searchQuery);
            const highlightedDescription = highlightText(repo.description, searchQuery);
            
            return `
              <article class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 staggered-card transform hover:-translate-y-1" data-index="${index}">
                <div class="p-6">
                  <div class="flex items-center justify-between mb-3">
                    <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
                      <a href="/repos/${repo.slug}" class="hover:underline">${highlightedTitle}</a>
                    </h2>
                    ${repo.category ? `
                      <span class="px-2 py-1 bg-purple-100 text-purple-800 text-xs font-medium rounded dark:bg-purple-900 dark:text-purple-300">
                        ${repo.category}
                      </span>
                    ` : ''}
                  </div>
                  <p class="text-gray-600 dark:text-gray-400 mb-4">
                    ${highlightedDescription}
                  </p>
                  <div class="flex flex-wrap gap-2">
                    ${repo.tags?.map((tag) => {
                      const highlightedTag = highlightText(tag, searchQuery);
                      return `
                        <span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded dark:bg-blue-900 dark:text-blue-300">${highlightedTag}</span>
                      `;
                    }).join('') || ''}
                  </div>
                </div>
              </article>
            `;
          }).join('')}
        </div>
      `;
    }
    
    function renderPagination(currentPage, totalPages) {
      if (!paginationContainer) return;
      
      let paginationHTML = `
        <nav class="flex items-center space-x-2">
      `;
      
      if (currentPage > 1) {
        paginationHTML += `
          <button data-page="${currentPage - 1}" class="px-3 py-1 text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700 rounded">Previous</button>
        `;
      } else {
        paginationHTML += `
          <span class="px-3 py-1 text-gray-500 dark:text-gray-400">Previous</span>
        `;
      }
      
      for (let page = 1; page <= totalPages; page++) {
        paginationHTML += `
          <button 
            data-page="${page}"
            class="px-3 py-1 rounded ${page === currentPage ? 'bg-blue-600 text-white' : 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700'}"
          >
            ${page}
          </button>
        `;
      }
      
      if (currentPage < totalPages) {
        paginationHTML += `
          <button data-page="${currentPage + 1}" class="px-3 py-1 text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700 rounded">Next</button>
        `;
      } else {
        paginationHTML += `
          <span class="px-3 py-1 text-gray-500 dark:text-gray-400">Next</span>
        `;
      }
      
      paginationHTML += `
        </nav>
      `;
      
      paginationContainer.innerHTML = paginationHTML;
      
      document.querySelectorAll('#pagination-container button').forEach(button => {
        button.addEventListener('click', (e) => {
          const target = e.target;
          if (target) {
            const page = parseInt(target.dataset.page || '1');
            if (page) {
              loadPage(page);
              const container = document.querySelector('#repos-container');
              if (container) {
                container.scrollIntoView({ behavior: 'smooth' });
              }
            }
          }
        });
      });
    }
    
    function renderCategoryFilter() {
      if (!categoryFilterContainer) return;
      
      const categoryMap = {};
      sortedRepos.forEach(repo => {
        const category = repo.category || 'Default';
        categoryMap[category] = (categoryMap[category] || 0) + 1;
      });
      
      const categories = Object.entries(categoryMap).map(([name, count]) => ({
        name,
        count
      }));
      
      categoryFilterContainer.innerHTML = `
        <div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-lg p-6 mb-6">
          <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Categories</h2>
          <ul class="space-y-2">
            <li>
              <button 
                class="w-full text-left px-3 py-2 rounded-lg transition-colors ${
                  currentCategory === '' 
                    ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' 
                    : 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700'
                }"
                data-category=""
              >
                All Repos
                <span class="float-right">(${categories.reduce((sum, cat) => sum + cat.count, 0)})</span>
              </button>
            </li>
            ${categories.map(category => `
              <li>
                <button 
                  class="w-full text-left px-3 py-2 rounded-lg transition-colors ${
                    currentCategory === category.name 
                      ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' 
                      : 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700'
                  }"
                  data-category="${category.name}"
                >
                  ${category.name}
                  <span class="float-right">(${category.count})</span>
                </button>
              </li>
            `).join('')}
          </ul>
        </div>
      `;
      
      categoryFilterContainer.querySelectorAll('button[data-category]').forEach(button => {
        button.addEventListener('click', (e) => {
          const target = e.target;
          if (target) {
            currentCategory = target.dataset.category || '';
            filterRepos();
            loadPage(1);
            
            categoryFilterContainer.querySelectorAll('button[data-category]').forEach(btn => {
              btn.classList.remove('bg-blue-100', 'text-blue-800', 'dark:bg-blue-900', 'dark:text-blue-300');
              btn.classList.add('text-gray-700', 'hover:bg-gray-100', 'dark:text-gray-300', 'dark:hover:bg-gray-700');
            });
            
            target.classList.remove('text-gray-700', 'hover:bg-gray-100', 'dark:text-gray-300', 'dark:hover:bg-gray-700');
            target.classList.add('bg-blue-100', 'text-blue-800', 'dark:bg-blue-900', 'dark:text-blue-300');
          }
        });
      });
    }
  });
</script>